@Library('gematik-jenkins-shared-library') _

def CREDENTIAL_ID_GEMATIK_GIT = 'svc_gitlab_prod_credentials'
def BRANCH = 'master'
def JIRA_PROJECT_ID = 'TGR'
def GITLAB_PROJECT_ID = '644'
def TAG_NAME = "ci/build"
def POM_PATH = 'pom.xml'
def POM_PATH_PRODUCT = 'tiger-testenv-mgr/pom.xml'

pipeline {
    options {
        disableConcurrentBuilds()
    }
    agent { label 'k8-backend-large' }

    tools {
        maven 'Default'
    }
    environment {
        JAVA_TOOL_OPTIONS = '-Xmx16g  -Xms1g -Dgwt.extraJvmArgs="-Xmx16g -Xms1g"'
    }

    stages {
        stage('Initialize') {
            steps {
                useJdk('OPENJDK17')
            }
        }

        stage('gitCreateBranch') {
            when { branch BRANCH }
            steps {
                gitCreateBranch()
            }
        }

        stage('set Version') {
            steps {
                mavenSetVersionFromJiraProject(JIRA_PROJECT_ID, POM_PATH, true, "", false)
            }
        }

        stage('Build') {
            steps {
                mavenBuild(POM_PATH)
            }
        }

        stage('Test') {
            environment {
                TIGER_DOCKER_HOST = dockerGetCurrentHostname()
            }
            steps {
                withCredentials([string(credentialsId: 'GITHUB.API.Token', variable: 'GITHUB_TOKEN')]) {
                    mavenVerify(POM_PATH, "-Dwdm.gitHubToken=$GITHUB_TOKEN -P=NoLongrunner,dev")
                }
            }
        }

        stage('Sonar') {
            when {
                not {
                    branch BRANCH
                }
            }
            steps {
                mavenCheckWithSonarQube(POM_PATH, "", false)
            }
        }

        stage('deploy') {
            when { branch BRANCH }
            steps {
                mavenDeploy(POM_PATH)
            }
        }

        stage('Tag and Push CI-build') {
            when { branch BRANCH }
            steps {
                gitCreateAndPushTag(JIRA_PROJECT_ID)
            }
        }

        stage('GitLab-Update-Snapshot') {
            when { branch BRANCH }
            steps {
                gitLabUpdateMavenSnapshot(JIRA_PROJECT_ID, GITLAB_PROJECT_ID, POM_PATH_PRODUCT)
            }
        }

        stage('Docker Images') {
            matrix {

                axes {
                    axis {
                        name 'APP'
                        values 'tiger-proxy', 'tiger-zion'
                    }
                }
                environment {
                    IMAGE_NAME = "tiger/${APP}"
                    IMAGE_VERSION = 'latest'
                    VERSION = 'latest'
                    BUILD_ARGS = "--build-arg APP=${APP}"
                    DOCKER_TARGET_REGISTRY = dockerGetGematikRegistry('EUWEST3')
                }
                stages {
                    stage('Build Docker Image') {
                        steps {
                            dockerBuild(IMAGE_NAME, VERSION, IMAGE_VERSION, BUILD_ARGS, 'Dockerfile_' + APP, DOCKER_TARGET_REGISTRY)

                        }
                    }

                    stage('Push Docker Image') {
                        when {
                            branch BRANCH
                        }
                        steps {
                            dockerPushImage(IMAGE_NAME, VERSION, 'tiger-gar-writer', DOCKER_TARGET_REGISTRY)
                        }
                    }

                    stage('Cleanup Docker Image') {
                        steps {
                            dockerRemoveLocalImage(IMAGE_NAME, VERSION, DOCKER_TARGET_REGISTRY)
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sendEMailNotification(getTigerEMailList())
            showJUnitAsXUnitResult("**/target/*-reports/TEST-*.xml")
        }
    }
}
