HTTP/1.1 200
Cache-Control: no-store
Pragma: no-cache
Version: 0.1-SNAPSHOT
Content-Type: application/json
Date: Fri, 26 Feb 2021 15:45:56 GMT
Keep-Alive: timeout=60
Connection: keep-alive


<?xml version="1.0" encoding="UTF-8"?>

<Parameters xmlns="http://hl7.org/fhir">
    <parameter>
        <name value="ePrescription"/>
        <resource>
            <Binary>
                <meta>
                    <profile value="https://gematik.de/fhir/StructureDefinition/ErxBinary"/>
                </meta>
                <contentType value="application/pkcs7-mime"/>
                <data value=""/>
            </Binary>
        </resource>
    </parameter>
</Parameters>